basePath: /
definitions:
  models.User:
    properties:
      ageRange:
        description: Preferred age range (e.g., "18-25")
        type: string
      bio:
        description: Optional user bio
        type: string
      created_at:
        description: Timestamp of creation
        type: string
      dateOfBirth:
        description: Date of birth in YYYY-MM-DD format, required
        type: string
      deleted_at:
        description: Soft delete timestamp (nullable, pointer for nil value)
        type: string
      distance:
        description: Preferred match distance in kilometers
        type: integer
      email:
        description: Unique email, required
        type: string
      firstName:
        description: User's first name, required
        type: string
      gender:
        description: User's gender, required
        type: string
      genderPreference:
        description: Preferred gender for matches
        type: string
      id:
        description: Primary key for the user
        type: integer
      interestedIn:
        description: What the user is interested in (e.g., "dating", "friendship"),
          required
        type: string
      interests:
        description: List of user interests, stored as JSON
        items:
          type: string
        type: array
      latitude:
        description: User's latitude for geolocation
        type: number
      longitude:
        description: User's longitude for geolocation
        type: number
      lookingFor:
        description: What the user is looking for (e.g., "relationship"), required
        type: string
      photos:
        description: List of photo URLs, stored as JSON
        items:
          type: string
        type: array
      profilePictureURL:
        description: URL of the user's profile picture
        type: string
      sexualOrientation:
        description: Optional sexual orientation
        type: string
      updated_at:
        description: Timestamp of last update
        type: string
    type: object
host: campuscupid-backend.onrender.com
info:
  contact:
    email: support@campuscupid.com
    name: API Support
  description: This is the backend API for the CampusCupid dating app.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: CampusCupid API
  version: "1.0"
paths:
  /matches/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a list of potential matches based on user preferences
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get potential matches
      tags:
      - matchmaking
swagger: "2.0"
