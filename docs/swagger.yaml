basePath: /api/v1
definitions:
  main.APIError:
    properties:
      message:
        type: string
    type: object
  main.User:
    description: User represents a user in our system
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple API demonstrating Swagger integration in Go
  title: Go API with Swagger Docs
  version: "1.0"
paths:
  /users:
    get:
      description: Fetch all users from the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.User'
            type: array
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new user to the system
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.APIError'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Remove a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.APIError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.APIError'
      summary: Delete a user
      tags:
      - users
    get:
      description: Fetch a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.APIError'
      summary: Get a single user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Modify the details of an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.APIError'
      summary: Update an existing user
      tags:
      - users
swagger: "2.0"
