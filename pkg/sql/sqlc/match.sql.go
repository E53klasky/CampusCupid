// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: match.sql

package db

import (
	"context"
	"database/sql"
)

const createMatch = `-- name: CreateMatch :execresult
INSERT INTO Matches (match_id, user1_id, user2_id, created_at)
VALUES (?, ?, ?, NOW())
`

type CreateMatchParams struct {
	MatchID string `json:"match_id"`
	User1ID string `json:"user1_id"`
	User2ID string `json:"user2_id"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMatch, arg.MatchID, arg.User1ID, arg.User2ID)
}

const getMatches = `-- name: GetMatches :many
SELECT match_id, user1_id, user2_id, created_at
FROM Matches AS m
WHERE m.user1_id = ? OR m.user2_id = ?
`

type GetMatchesParams struct {
	User1ID string `json:"user1_id"`
	User2ID string `json:"user2_id"`
}

func (q *Queries) GetMatches(ctx context.Context, arg GetMatchesParams) ([]Match, error) {
	rows, err := q.db.QueryContext(ctx, getMatches, arg.User1ID, arg.User2ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Match{}
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.MatchID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
