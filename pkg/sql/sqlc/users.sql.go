// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO Users (user_id, email, password, name, gender, age, latitude, longitude, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
`

type CreateUserParams struct {
	UserID    string  `json:"user_id"`
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	Name      string  `json:"name"`
	Gender    string  `json:"gender"`
	Age       int32   `json:"age"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Gender,
		arg.Age,
		arg.Latitude,
		arg.Longitude,
	)
}

const discoverUsersV1 = `-- name: DiscoverUsersV1 :many
SELECT user_id, name, gender, age
FROM Users
WHERE user_id NOT IN (
    SELECT swipee_id
    FROM Swipes
    WHERE swiper_id = ?
)
`

type DiscoverUsersV1Row struct {
	UserID string `json:"user_id"`
	Name   string `json:"name"`
	Gender string `json:"gender"`
	Age    int32  `json:"age"`
}

func (q *Queries) DiscoverUsersV1(ctx context.Context, swiperID string) ([]DiscoverUsersV1Row, error) {
	rows, err := q.db.QueryContext(ctx, discoverUsersV1, swiperID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscoverUsersV1Row{}
	for rows.Next() {
		var i DiscoverUsersV1Row
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Gender,
			&i.Age,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const discoverUsersV2 = `-- name: DiscoverUsersV2 :many
SELECT user_id, name, gender, age
FROM Users
WHERE user_id NOT IN (
    SELECT swipee_id
    FROM Swipes
    WHERE swiper_id = $1
) 
AND age >= COALESCE(?, age)
AND age <= COALESCE(?, age)
AND gender = COALESCE(?, gender)
`

type DiscoverUsersV2Params struct {
	GreaterThanAge sql.NullInt32  `json:"greater_than_age"`
	LowerThanAge   sql.NullInt32  `json:"lower_than_age"`
	Gender         sql.NullString `json:"gender"`
}

type DiscoverUsersV2Row struct {
	UserID string `json:"user_id"`
	Name   string `json:"name"`
	Gender string `json:"gender"`
	Age    int32  `json:"age"`
}

func (q *Queries) DiscoverUsersV2(ctx context.Context, arg DiscoverUsersV2Params) ([]DiscoverUsersV2Row, error) {
	rows, err := q.db.QueryContext(ctx, discoverUsersV2, arg.GreaterThanAge, arg.LowerThanAge, arg.Gender)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscoverUsersV2Row{}
	for rows.Next() {
		var i DiscoverUsersV2Row
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Gender,
			&i.Age,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, password, name
FROM Users
WHERE email = ?
`

type GetUserByEmailRow struct {
	UserID   string `json:"user_id"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Name     string `json:"name"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Name,
	)
	return i, err
}
