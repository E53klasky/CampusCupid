// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO Users (user_id, email, password, name, gender, age, latitude, longitude, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
`

type CreateUserParams struct {
	UserID    string  `json:"user_id"`
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	Name      string  `json:"name"`
	Gender    string  `json:"gender"`
	Age       int32   `json:"age"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Gender,
		arg.Age,
		arg.Latitude,
		arg.Longitude,
	)
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, password, name
FROM Users
WHERE email = ?
`

type GetUserByEmailRow struct {
	UserID   string `json:"user_id"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Name     string `json:"name"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Password,
		&i.Name,
	)
	return i, err
}
