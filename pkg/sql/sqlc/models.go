// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type SwipesSwipeType string

const (
	SwipesSwipeTypeYES SwipesSwipeType = "YES"
	SwipesSwipeTypeNO  SwipesSwipeType = "NO"
)

func (e *SwipesSwipeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SwipesSwipeType(s)
	case string:
		*e = SwipesSwipeType(s)
	default:
		return fmt.Errorf("unsupported scan type for SwipesSwipeType: %T", src)
	}
	return nil
}

type NullSwipesSwipeType struct {
	SwipesSwipeType SwipesSwipeType `json:"swipes_swipe_type"`
	Valid           bool            `json:"valid"` // Valid is true if SwipesSwipeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSwipesSwipeType) Scan(value interface{}) error {
	if value == nil {
		ns.SwipesSwipeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SwipesSwipeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSwipesSwipeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SwipesSwipeType), nil
}

type Match struct {
	MatchID   string       `json:"match_id"`
	User1ID   string       `json:"user1_id"`
	User2ID   string       `json:"user2_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type Ranking struct {
	UserID              string `json:"user_id"`
	LikeCount           int32  `json:"like_count"`
	DislikeCount        int32  `json:"dislike_count"`
	AttractivenessScore string `json:"attractiveness_score"`
}

type Swipe struct {
	SwipeID   string              `json:"swipe_id"`
	SwiperID  string              `json:"swiper_id"`
	SwipeeID  string              `json:"swipee_id"`
	SwipeType NullSwipesSwipeType `json:"swipe_type"`
	CreatedAt sql.NullTime        `json:"created_at"`
}

type User struct {
	UserID    string       `json:"user_id"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	Name      string       `json:"name"`
	Gender    string       `json:"gender"`
	Age       int32        `json:"age"`
	Latitude  float64      `json:"latitude"`
	Longitude float64      `json:"longitude"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}
