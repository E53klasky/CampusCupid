// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: swipe.sql

package db

import (
	"context"
	"database/sql"
)

const checkMatch = `-- name: CheckMatch :one
SELECT EXISTS (
    SELECT 1 FROM Swipes 
    WHERE swiper_id = ? AND swipee_id = ? AND swipe_type = 'YES'
) AS has_swiped_yes
`

type CheckMatchParams struct {
	SwiperID string `json:"swiper_id"`
	SwipeeID string `json:"swipee_id"`
}

func (q *Queries) CheckMatch(ctx context.Context, arg CheckMatchParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkMatch, arg.SwiperID, arg.SwipeeID)
	var has_swiped_yes bool
	err := row.Scan(&has_swiped_yes)
	return has_swiped_yes, err
}

const createSwipe = `-- name: CreateSwipe :execresult
INSERT INTO Swipes (swipe_id, swiper_id, swipee_id, swipe_type, created_at) 
VALUES (?, ?, ?, ?, NOW())
`

type CreateSwipeParams struct {
	SwipeID   string              `json:"swipe_id"`
	SwiperID  string              `json:"swiper_id"`
	SwipeeID  string              `json:"swipee_id"`
	SwipeType NullSwipesSwipeType `json:"swipe_type"`
}

func (q *Queries) CreateSwipe(ctx context.Context, arg CreateSwipeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSwipe,
		arg.SwipeID,
		arg.SwiperID,
		arg.SwipeeID,
		arg.SwipeType,
	)
}
